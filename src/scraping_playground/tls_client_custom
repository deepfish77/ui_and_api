import os
import tls_client
import logging
import requests
from tls_client.sessions import TLSClientExeption

# Configure logging
logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)


def get_custom_tls_client_session():
    """
    Creates a custom TLS client session with specific JA3 fingerprint and HTTP/2 settings.
    """
    try:
        session = tls_client.Session(
            ja3_string="771,4865-4866-4867-49195-49199-49196-49200-52393-52392-49171-49172-156-157-47-53,0-23-65281-10-11-35-16-5-13-18-51-45-43-27-17513,29-23-24,0",
            h2_settings={
                "HEADER_TABLE_SIZE": 65536,
                "MAX_CONCURRENT_STREAMS": 1000,
                "INITIAL_WINDOW_SIZE": 6291456,
                "MAX_HEADER_LIST_SIZE": 262144,
            },
            h2_settings_order=[
                "HEADER_TABLE_SIZE",
                "MAX_CONCURRENT_STREAMS",
                "INITIAL_WINDOW_SIZE",
                "MAX_HEADER_LIST_SIZE",
            ],
            supported_signature_algorithms=[
                "ECDSAWithP256AndSHA256",
                "PSSWithSHA256",
                "PKCS1WithSHA256",
                "ECDSAWithP384AndSHA384",
                "PSSWithSHA384",
                "PKCS1WithSHA384",
                "PSSWithSHA512",
                "PKCS1WithSHA512",
            ],
            supported_versions=["GREASE", "1.3", "1.2"],
            key_share_curves=["GREASE", "X25519"],
            cert_compression_algo="brotli",
            pseudo_header_order=[":method", ":authority", ":scheme", ":path"],
            connection_flow=15663105,
            header_order=["accept", "user-agent", "accept-encoding", "accept-language"],
        )
        logger.info("Custom TLS client session created successfully.")
        return session
    except Exception as e:
        logger.exception("Error creating custom TLS client session: %s", e)
        raise


def get_tls_session(client_identifier="chrome112"):
    """
    Creates a TLS session using a simple client identifier.
    """
    try:
        session = tls_client.Session(
            client_identifier=client_identifier, random_tls_extension_order=True
        )
        logger.info("TLS session created with client identifier: %s", client_identifier)
        session.proxies.update(
            {"http": os.getenv("proxy"), "https": os.getenv("proxy")}
        )
        return session
    except Exception as e:
        logger.exception(
            "Error creating TLS session with client identifier %s: %s",
            client_identifier,
            e,
        )
        raise


def get_tls_response_custom(
    url="https://www.example.com/",
    headers={"key1": "value1"},
    json_payload={"key1": "key2"},
):
    """
    Sends a POST request using the custom TLS client session.
    """
    try:
        session = get_custom_tls_client_session()
        logger.info("Sending POST request to URL: %s", url)
        response = session.post(url, headers=headers, json=json_payload)
        logger.info("Received response with status code: %s", response.status_code)
        return response
    except TLSClientExeption as e:
        logger.exception("Error during TLS POST request to %s: %s", url, e)
        return None


# url="https://www.example.com/",
# headers={"key1": "value1"},
def get_tls_response(url, headers):
    try:
        session = get_tls_session()
        response = session.get(url, headers=headers)
        return response.json()
    except Exception as e:
        logger.exception("Failed to get TLS response from %s", url)
        raise Exception(f"Error during GET request to {url}: {e}") from e





def get_session_custom_headers():
    session = requests.Session()
    session.headers.update({
        "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/png,image/*;q=0.8",
        "Accept-Language": "en-US,en;q=0.5",
        "Sec-Fetch-Dest": "document",
        "Sec-Fetch-Mode": "navigate",
        "Sec-Fetch-Site": "none",
        "Sec-Fetch-User": "?1",
        "Upgrade-Insecure-Requests": "1",
        "User-Agent": "Mozilla/5.0 (X11; Linux x86_64; rv:131.0) Gecko/20100101 Firefox/131.0",
    })

    proxy_string = os.getenv("proxy")
    if proxy_string:
        session.proxies.update({
            "http": proxy_string,
            "https": proxy_string,
        })

    response = session.get("http://examp.le/ip")
    print(response.text)




def interate_through_walletFinder():
    for page in range(1, 25):
        url = f"https://example/query/?page={page}&locale=en-gb"
        json_data = get_tls_response(url,headers={"key1": "value1"})
        if len(json_data) == 0:
            break